// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: notes.sql

package db

import (
	"context"
	"database/sql"
)

const createNote = `-- name: CreateNote :one
INSERT INTO notes (
    user_id, title, description
) VALUES (
    $1, $2, $3
) RETURNING id, user_id, title, description, created_at, updated_at, is_deleted
`

type CreateNoteParams struct {
	UserID      int32          `json:"user_id"`
	Title       string         `json:"title"`
	Description sql.NullString `json:"description"`
}

func (q *Queries) CreateNote(ctx context.Context, arg CreateNoteParams) (Note, error) {
	row := q.db.QueryRowContext(ctx, createNote, arg.UserID, arg.Title, arg.Description)
	var i Note
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsDeleted,
	)
	return i, err
}

const deleteNote = `-- name: DeleteNote :one
UPDATE notes
SET is_deleted = TRUE, updated_at = now()
WHERE id = $1 AND user_id = $2
RETURNING id, user_id, title, description, created_at, updated_at, is_deleted
`

type DeleteNoteParams struct {
	ID     int32 `json:"id"`
	UserID int32 `json:"user_id"`
}

func (q *Queries) DeleteNote(ctx context.Context, arg DeleteNoteParams) (Note, error) {
	row := q.db.QueryRowContext(ctx, deleteNote, arg.ID, arg.UserID)
	var i Note
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsDeleted,
	)
	return i, err
}

const getNote = `-- name: GetNote :one
SELECT id, user_id, title, description, created_at, updated_at, is_deleted FROM notes
WHERE id = $1 AND is_deleted = FALSE LIMIT 1
`

func (q *Queries) GetNote(ctx context.Context, id int32) (Note, error) {
	row := q.db.QueryRowContext(ctx, getNote, id)
	var i Note
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsDeleted,
	)
	return i, err
}

const listNotes = `-- name: ListNotes :many
SELECT id, user_id, title, description, created_at, updated_at, is_deleted FROM notes
WHERE is_deleted = FALSE
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListNotesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListNotes(ctx context.Context, arg ListNotesParams) ([]Note, error) {
	rows, err := q.db.QueryContext(ctx, listNotes, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Note{}
	for rows.Next() {
		var i Note
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.IsDeleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listNotesByUserId = `-- name: ListNotesByUserId :many
SELECT id, user_id, title, description, created_at, updated_at, is_deleted FROM notes
WHERE is_deleted = FALSE AND user_id = $3
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListNotesByUserIdParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
	UserID int32 `json:"user_id"`
}

func (q *Queries) ListNotesByUserId(ctx context.Context, arg ListNotesByUserIdParams) ([]Note, error) {
	rows, err := q.db.QueryContext(ctx, listNotesByUserId, arg.Limit, arg.Offset, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Note{}
	for rows.Next() {
		var i Note
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.IsDeleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateNote = `-- name: UpdateNote :one
UPDATE notes
SET title = $3, description = $4, updated_at = now()
WHERE id = $1 AND user_id = $2 AND is_deleted = FALSE
RETURNING id, user_id, title, description, created_at, updated_at, is_deleted
`

type UpdateNoteParams struct {
	ID          int32          `json:"id"`
	UserID      int32          `json:"user_id"`
	Title       string         `json:"title"`
	Description sql.NullString `json:"description"`
}

func (q *Queries) UpdateNote(ctx context.Context, arg UpdateNoteParams) (Note, error) {
	row := q.db.QueryRowContext(ctx, updateNote,
		arg.ID,
		arg.UserID,
		arg.Title,
		arg.Description,
	)
	var i Note
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsDeleted,
	)
	return i, err
}
